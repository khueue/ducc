#!/usr/bin/env escript
%%! -pa ebin -Wall

version() ->
    '0.4.0'.

usage() ->
    io:fwrite('ducc ~s~n', [version()]),
    io:format('usage: ducc [-a|-l|-p|-t|-v] [file]~n').

main([Step, File]) ->
    {Lines, String} = read_lines_and_string(File),
    compile(step(Step), File, String, Lines);
main(["-v"]) ->
    io:fwrite('ducc ~s~n', [version()]);
main(["-"++Flag]) ->
    {Lines, String} = read_lines_and_string(standard_io),
    compile(program(Flag), '<stdin>', String, Lines);
main([File]) ->
    {Lines, String} = read_lines_and_string(File),
    compile(default, File, String, Lines);
main([]) ->
    {Lines, String} = read_lines_and_string(standard_io),
    compile(default, '<stdin>', String, Lines);
main(_) ->
    usage().

program("l") -> lexer;
program("p") -> parser;
program("a") -> analyzer;
program("t") -> translator.

read_lines_and_string(standard_io) ->
    Lines = tool_chain:read_lines_from_stream(standard_io),
    String = tool_chain:string_from_lines(Lines),
    {Lines, String};
read_lines_and_string(Stream) ->
    Lines = tool_chain:read_lines_from_file(Stream),
    String = tool_chain:string_from_lines(Lines),
    {Lines, String}.

compile(Program, Stream, String, Lines) ->
    Result = (catch process(Program, Stream, String, Lines)),
    case Result of
        {ok, Output} ->
            tool_chain:term_to_output({{source,Lines}, Output});
        {lexer_exception, Message} ->
            tool_chain:die(Message);
        {parser_exception, Message} ->
            tool_chain:die(Message);
        {analyzer_exception, Message} ->
            tool_chain:die(Message);
        {translator_exception, Message} ->
            tool_chain:die(Message);
        {tool_chain_exception, invalid_term} ->
            tool_chain:die(String)
    end.

process(Program, Stream, String, Lines) ->
    case Program of
        lexer ->
            {ok, Tokens} = lexer_driver:tokenize(Stream, String),
            {ok, {tokens,Tokens}};
        parser ->
            {ok, {tokens,Tokens}} = process(lexer, Stream, String, Lines),
            {ok, ParseTree} = parser_driver:parse(Stream, Tokens),
            {ok, {ast,ParseTree}};
        analyzer ->
            {ok, {ast,ParseTree}} = process(parser, Stream, String, Lines),
            {ok, ParseTree1} = analyzer_driver:analyze(Stream, ParseTree),
            {ok, {ast,ParseTree1}};
        translator ->
            {ok, {ast,ParseTree1}} = process(analyzer, Stream, String, Lines),
            {ok, RtlCode} = translator_driver:translate(Stream, ParseTree1, Lines),
            {ok, {rtl,RtlCode}};
        _DefaultAllSteps ->
            process(translator, Stream, String, Lines)
    end.
