#!/usr/bin/env escript
%%! -pa ebin -Wall

version() ->
    '0.0.1'.

usage() ->
    io:format('Usage: ducc [file]~n'),
    io:format('(Uses stdin if no file given.)~n').

main([]) ->
    String = tool_chain:string_from_input(),
    compile('<stdin>', String);
main(["-v"]) ->
    io:fwrite('ducc ~s~n', [version()]);
main([File]) ->
    String = tool_chain:string_from_file(File),
    compile(File, String);
main(_) ->
    usage().

compile(Stream, String) ->
    {ok, Tokens} = catch_it(lexer_driver:tokenize(Stream, String)),
    {ok, ParseTree} = catch_it(parser_driver:parse(Stream, Tokens)),
    ParseTree1 = analyzer_driver:analyze(Stream, ParseTree),
    tool_chain:term_to_output(ParseTree1).

catch_it({error, _}) ->
    erlang:halt(1);
catch_it(Term) ->
    Term.
