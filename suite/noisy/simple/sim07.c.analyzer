{{source,[{1,
           "/* Prints the numbers from 1 to 20. Puts an X next to the number if"},
          {2,
           "   even, and a Y if divisble by 3. If the number is *not* divisible by"},
          {3,
           "   3 but greater than 10, put a W next to it. Note that first if"},
          {4,"   statement is written without braces.  */"},
          {5,[]},
          {6,"void putint(int i);"},
          {7,"void putstring(char s[]);"},
          {8,[]},
          {9,"int main(void) {"},
          {10,"  int i;"},
          {11,"  char space[2];"},
          {12,"  char X[2];  char Y[2];"},
          {13,"  char W[2];  char nl[2];"},
          {14,[]},
          {15,"  space[0] = ' ';  space[1] = 0;"},
          {16,"  X[0]     = 'X';  X[1]     = 0;"},
          {17,"  Y[0]     = 'Y';  Y[1]     = 0;"},
          {18,"  W[0]     = 'W';  W[1]     = 0;"},
          {19,"  nl[0]    = '\\n'; nl[1]    = 0;"},
          {20,[]},
          {21,"  i = 0;"},
          {22,"  while (i < 21) {"},
          {23,"    putint(i);"},
          {24,"    putstring(space);"},
          {25,"    if (i/2*2==i) putstring(X);"},
          {26,"    if (i/3*3==i) {"},
          {27,"      putstring(Y);"},
          {28,"    } "},
          {29,"    else if (i>10) putstring(W);"},
          {30,"    putstring(nl);"},
          {31,"    i = i + 1;"},
          {32,"  }"},
          {33,"}"}]},
 {ast,{{6,program},
       "suite/noisy/simple/sim07.c",
       [{{6,fundec},void,"putint",[{{6,scalardec},int,"i"}]},
        {{7,fundec},void,"putstring",[{{7,farraydec},char,"s"}]},
        {{9,fundef},
         int,"main",[],
         [{{10,scalardec},int,"i"},
          {{11,arraydec},char,"space",2},
          {{12,arraydec},char,"X",2},
          {{12,arraydec},char,"Y",2},
          {{13,arraydec},char,"W",2},
          {{13,arraydec},char,"nl",2}],
         [{{15,binop},
           {{15,arrelem},"space",{{15,intconst},0}},
           '=',
           {{15,charconst},' '}},
          {{15,binop},
           {{15,arrelem},"space",{{15,intconst},1}},
           '=',
           {{15,intconst},0}},
          {{16,binop},
           {{16,arrelem},"X",{{16,intconst},0}},
           '=',
           {{16,charconst},'X'}},
          {{16,binop},
           {{16,arrelem},"X",{{16,intconst},1}},
           '=',
           {{16,intconst},0}},
          {{17,binop},
           {{17,arrelem},"Y",{{17,intconst},0}},
           '=',
           {{17,charconst},'Y'}},
          {{17,binop},
           {{17,arrelem},"Y",{{17,intconst},1}},
           '=',
           {{17,intconst},0}},
          {{18,binop},
           {{18,arrelem},"W",{{18,intconst},0}},
           '=',
           {{18,charconst},'W'}},
          {{18,binop},
           {{18,arrelem},"W",{{18,intconst},1}},
           '=',
           {{18,intconst},0}},
          {{19,binop},
           {{19,arrelem},"nl",{{19,intconst},0}},
           '=',
           {{19,charconst},'\\n'}},
          {{19,binop},
           {{19,arrelem},"nl",{{19,intconst},1}},
           '=',
           {{19,intconst},0}},
          {{21,binop},{{21,ident},"i"},'=',{{21,intconst},0}},
          {{22,while},
           {{22,binop},{{22,ident},"i"},'<',{{22,intconst},21}},
           [{{23,funcall},"putint",[{{23,ident},"i"}]},
            {{24,funcall},"putstring",[{{24,ident},"space"}]},
            {{25,'if'},
             {{25,binop},
              {{25,binop},
               {{25,binop},{{25,ident},"i"},'/',{{25,intconst},2}},
               '*',
               {{25,intconst},2}},
              '==',
              {{25,ident},"i"}},
             {{25,funcall},"putstring",[{{25,ident},"X"}]},
             nil},
            {{26,'if'},
             {{26,binop},
              {{26,binop},
               {{26,binop},{{26,ident},"i"},'/',{{26,intconst},3}},
               '*',
               {{26,intconst},3}},
              '==',
              {{26,ident},"i"}},
             [{{27,funcall},"putstring",[{{27,ident},"Y"}]}],
             {{29,'if'},
              {{29,binop},{{29,ident},"i"},'>',{{29,intconst},10}},
              {{29,funcall},"putstring",[{{29,ident},"W"}]},
              nil}},
            {{30,funcall},"putstring",[{{30,ident},"nl"}]},
            {{31,binop},
             {{31,ident},"i"},
             '=',
             {{31,binop},{{31,ident},"i"},'+',{{31,intconst},1}}}]}]}]}}}.
