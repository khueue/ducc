{{source,[{1,"// A simple calculator, based on predictive parsing."},
          {2,"//"},
          {3,"// Try:"},
          {4,"// 1+2+3+4"},
          {5,"// 100-10-1"},
          {6,"// (12-4)+(99-11+16)*19 "},
          {7,"// (3*113+((2*2)*(2*2)))*1000000/113"},
          {8,[]},
          {9,"/* Important characters:"},
          {10,[]},
          {11,"'0' = 48"},
          {12,"'9' = 57"},
          {13,"'+' = 43 "},
          {14,"'-' = 45 "},
          {15,"'*' = 42"},
          {16,"'/' = 47"},
          {17,"'(' = 40"},
          {18,"')' = 41"},
          {19,[]},
          {20,"*/"},
          {21,[]},
          {22,"void getstring(char s[]);"},
          {23,"void putstring(char s[]);"},
          {24,"void putint(int i);"},
          {25,[]},
          {26,[]},
          {27,"int p;"},
          {28,"char s[80];"},
          {29,[]},
          {30,"int zero;"},
          {31,"int nine;"},
          {32,"int plus;"},
          {33,"int minus;"},
          {34,"int times;"},
          {35,"int div;"},
          {36,"int lpar;"},
          {37,"int rpar;"},
          {38,[]},
          {39,"char bad_number[11];"},
          {40,"char bad_expression[15];"},
          {41,[]},
          {42,"char cr[2];"},
          {43,[]},
          {44,"char test_data[21];"},
          {45,[]},
          {46,"int isNumber(char c) {"},
          {47,"  return  (s[p] >= zero) && (s[p] <= nine);"},
          {48,"}"},
          {49,[]},
          {50,"// l == 0 => expr; l == 1 => term; l ==0 => factor"},
          {51,"int expr(int l) {"},
          {52,"  int a;"},
          {53,"  int b;"},
          {54,"  if (l==0) {"},
          {55,"    a = expr(1);"},
          {56,"    while (!(s[p] != plus && s[p]!= minus)) {"},
          {57,"      if (s[p] == plus)"},
          {58,"\t{"},
          {59,"\t  p = p + 1;"},
          {60,"\t  b = expr(1);"},
          {61,"\t  a = a + b;"},
          {62,"\t}"},
          {63,"      else "},
          {64,"\t{"},
          {65,"\t  p = p + 1;"},
          {66,"\t  b = expr(1);"},
          {67,"\t  a = a - b;"},
          {68,"\t}"},
          {69,"    }"},
          {70,"    return a;"},
          {71,"  }"},
          {72,"  else if (l==1) {"},
          {73,"    a = expr(2);"},
          {74,"    while (!(s[p] != times && s[p]!= div)) {"},
          {75,"      if (s[p] == times)"},
          {76,"\t{"},
          {77,"\t  p = p + 1;"},
          {78,"\t  b = expr(2);"},
          {79,"\t  a = a * b;"},
          {80,"\t}"},
          {81,"      else "},
          {82,"\t{"},
          {83,"\t  p = p + 1;"},
          {84,"\t  b = expr(2);"},
          {85,"\t  a = a / b;"},
          {86,"\t}"},
          {87,"    }"},
          {88,"    return a;"},
          {89,"  }"},
          {90,"  else if (l == 2) {"},
          {91,"    if (s[p] ==lpar) {"},
          {92,"      p = p+1;"},
          {93,"      a = expr(0);"},
          {94,"      if (s[p] !=rpar)  {"},
          {95,"\tputstring( bad_expression );"},
          {96,"\tputstring( cr );"},
          {97,"      }"},
          {98,"      p = p + 1;"},
          {99,"      return a;"},
          {100,"    } "},
          {101,"    else if (!isNumber(s[p])) {"},
          {102,"      putstring( bad_number );"},
          {103,"      putstring( cr );"},
          {104,"      return 0;"},
          {105,"    }"},
          {106,"    else {"},
          {107,"      a = 0;"},
          {108,"      while (isNumber(s[p])) {"},
          {109,"\ta = a * 10 + (s[p] - zero);"},
          {110,"\tp = p + 1;"},
          {111,"      }"},
          {112,"      return a;"},
          {113,"    }"},
          {114,"  }"},
          {115,"}"},
          {116,[]},
          {117,"int main(void) {"},
          {118,"  zero = 48;"},
          {119,"  nine = 57;"},
          {120,"  plus = 43;"},
          {121,"  minus = 45;"},
          {122,"  times = 42;"},
          {123,"  div = 47;"},
          {124,"  lpar = 40;"},
          {125,"  rpar = 41;"},
          {126,[]},
          {127,"  bad_number[ 0]='B';"},
          {128,"  bad_number[ 1]='a';"},
          {129,"  bad_number[ 2]='d';"},
          {130,"  bad_number[ 3]=' ';"},
          {131,"  bad_number[ 4]='n';"},
          {132,"  bad_number[ 5]='u';"},
          {133,"  bad_number[ 6]='m';"},
          {134,"  bad_number[ 7]='b';"},
          {135,"  bad_number[ 8]='e';"},
          {136,"  bad_number[ 9]='r';"},
          {137,"  bad_number[10]=0  ;"},
          {138,[]},
          {139,[]},
          {140,"  bad_expression[ 0]='B';"},
          {141,"  bad_expression[ 1]='a';"},
          {142,"  bad_expression[ 2]='d';"},
          {143,"  bad_expression[ 3]=' ';"},
          {144,"  bad_expression[ 4]='e';"},
          {145,"  bad_expression[ 5]='x';"},
          {146,"  bad_expression[ 6]='p';"},
          {147,"  bad_expression[ 7]='r';"},
          {148,"  bad_expression[ 8]='e';"},
          {149,"  bad_expression[ 9]='s';"},
          {150,"  bad_expression[10]='s';"},
          {151,"  bad_expression[11]='i';"},
          {152,"  bad_expression[12]='o';"},
          {153,"  bad_expression[13]='n';"},
          {154,"  bad_expression[14]= 0;"},
          {155,[]},
          {156,"  cr[0] = '\\n';"},
          {157,"  cr[1] = 0;"},
          {158,[]},
          {159,"  test_data[ 0]='(';"},
          {160,"  test_data[ 1]='1';"},
          {161,"  test_data[ 2]='2';"},
          {162,"  test_data[ 3]='-';"},
          {163,"  test_data[ 4]='4';"},
          {164,"  test_data[ 5]=')';"},
          {165,"  test_data[ 6]='+';"},
          {166,"  test_data[ 7]='(';"},
          {167,"  test_data[ 8]='9';"},
          {168,"  test_data[ 9]='9';"},
          {169,"  test_data[10]='-';"},
          {170,"  test_data[11]='1';"},
          {171,"  test_data[12]='1';"},
          {172,"  test_data[13]='+';"},
          {173,"  test_data[14]='1';"},
          {174,"  test_data[15]='6';"},
          {175,"  test_data[16]=')';"},
          {176,"  test_data[17]='*';"},
          {177,"  test_data[18]='1';"},
          {178,"  test_data[19]='9';"},
          {179,"  test_data[20]= 0 ;"},
          {180,[]},
          {181,"  getstring(s);"},
          {182,[]},
          {183,"  if (s[0]=='t') { //if input string begins with t, use test string"},
          {184,"    p = 0;"},
          {185,"    while (test_data[p] != 0) {"},
          {186,"      s[p] = test_data[p];"},
          {187,"      p = p + 1;"},
          {188,"    }"},
          {189,"    s[p] = 0;"},
          {190,"  }"},
          {191,[]},
          {192,"  p = 0;"},
          {193,"  putint(expr(0));"},
          {194,"  putstring(cr);"},
          {195,"}"},
          {196,[]},
          {197,[]},
          {198,[]},
          {199,[]}]},
 {asm,[[{segment,data},{align,4},{labdef,{label,"p"}},{space,4}],
       [{segment,data},{align,4},{labdef,{label,"s"}},{space,80}],
       [{segment,data},{align,4},{labdef,{label,"zero"}},{space,4}],
       [{segment,data},{align,4},{labdef,{label,"nine"}},{space,4}],
       [{segment,data},{align,4},{labdef,{label,"plus"}},{space,4}],
       [{segment,data},{align,4},{labdef,{label,"minus"}},{space,4}],
       [{segment,data},{align,4},{labdef,{label,"times"}},{space,4}],
       [{segment,data},{align,4},{labdef,{label,"div"}},{space,4}],
       [{segment,data},{align,4},{labdef,{label,"lpar"}},{space,4}],
       [{segment,data},{align,4},{labdef,{label,"rpar"}},{space,4}],
       [{segment,data},{align,4},{labdef,{label,"bad_number"}},{space,11}],
       [{segment,data},{align,4},{labdef,{label,"bad_expression"}},{space,15}],
       [{segment,data},{align,4},{labdef,{label,"cr"}},{space,2}],
       [{segment,data},{align,4},{labdef,{label,"test_data"}},{space,21}],
       [{segment,text},
        {globl,{label,"isNumber"}},
        {labdef,{label,"isNumber"}},
        {subu,sp,sp,92},
        {sw,fp,88,sp},
        {sw,ra,84,sp},
        {addu,fp,sp,92},
        {labdef,{label,100,"isNumber_end"}},
        {lw,ra,84,sp},
        {lw,fp,88,sp},
        {addu,sp,sp,92},
        {j,ra}],
       [{segment,text},
        {globl,{label,"expr"}},
        {labdef,{label,"expr"}},
        {subu,sp,sp,760},
        {sw,fp,756,sp},
        {sw,ra,752,sp},
        {addu,fp,sp,760},
        {labdef,{label,103,"expr_end"}},
        {lw,ra,752,sp},
        {lw,fp,756,sp},
        {addu,sp,sp,760},
        {j,ra}],
       [{segment,text},
        {globl,{label,"main"}},
        {labdef,{label,"main"}},
        {subu,sp,sp,1460},
        {sw,fp,1456,sp},
        {sw,ra,1452,sp},
        {addu,fp,sp,1460},
        {labdef,{label,131,"main_end"}},
        {lw,ra,1452,sp},
        {lw,fp,1456,sp},
        {addu,sp,sp,1460},
        {j,ra}]]}}.
