{{source,[{1,[]},
          {2,"/* Test."},
          {3,"** 8-queen."},
          {4,[]},
          {5,"Expected output:"},
          {6,[]},
          {7,"04752613"},
          {8,[]},
          {9,"This corresponds to the following board:"},
          {10,[]},
          {11,"--x-----"},
          {12,"-----x--"},
          {13,"---x----"},
          {14,"-x------"},
          {15,"-------x"},
          {16,"----x---"},
          {17,"------x-"},
          {18,"x-------"},
          {19,[]},
          {20,"*/"},
          {21,[]},
          {22,"int n;"},
          {23,"int board[8];"},
          {24,[]},
          {25,"void putint(int x);"},
          {26,[]},
          {27,"void printboard(int board[]) {"},
          {28,"  int i;"},
          {29,"  i = 0;"},
          {30,"  while(i < n) {"},
          {31,"      putint( board[i]);"},
          {32,"      i = i+1;"},
          {33,"    }"},
          {34,"}"},
          {35,[]},
          {36,"int check(int col, int row) {"},
          {37,"  int i;"},
          {38,"  int j;"},
          {39,[]},
          {40,"  i = col-1;"},
          {41,"  while (i >= 0) {"},
          {42,"    j = board[i];"},
          {43,"    if (j == row) return 0;               // Same row"},
          {44,"    if (j > row && col-i == j-row) "},
          {45,"      return 0;                           // Diagonal..."},
          {46,"    if (col-i == row-j) "},
          {47,"      return 0;                           // ...diagonal"},
          {48,"    i = i-1;"},
          {49,"  }"},
          {50,"  return 1;"},
          {51,"}"},
          {52,[]},
          {53,"int queen(int col, int row) {"},
          {54,"  if (col >= n) "},
          {55,
           "    return 1; // Returning false will generate all solutions..."},
          {56,"  while (row < n) {"},
          {57,"    board[col] = row;"},
          {58,"    if (check(col,row) && queen(col+1,0))"},
          {59,"      return 1;"},
          {60,"    row = row + 1;"},
          {61,"  }"},
          {62,"  return 0;"},
          {63,"}"},
          {64,[]},
          {65,"int main(void) {"},
          {66,"  n = 8;"},
          {67,"  queen(0,0);"},
          {68,"  printboard(board);"},
          {69,"}"},
          {70,[]},
          {71,[]},
          {72,[]}]},
 {rtl,[{data,{label,100},4},
       {data,{label,101},32},
       {proc,{label,"printboard"},
             [{temp,2}],
             [{temp,3},
              {temp,4},
              {temp,5},
              {temp,6},
              {temp,7},
              {temp,8},
              {temp,9},
              {temp,10},
              {temp,11},
              {temp,12},
              {temp,13},
              {temp,14}],
             0,
             [{source,29,"  i = 0;"},
              {eval,{temp,4},{icon,0}},
              {eval,{temp,3},{temp,4}},
              {source,30,"  while(i < n) {"},
              {jump,{label,103}},
              {labdef,{label,104}},
              {source,31,"      putint( board[i]);"},
              {eval,{temp,8},{icon,4}},
              {eval,{temp,9},{binop,'*',{temp,3},{temp,8}}},
              {eval,{temp,10},{binop,'+',{temp,2},{temp,9}}},
              {load,long,{temp,11},{temp,10}},
              {call,{temp,12},{label,"putint"},[{temp,11}]},
              {source,32,"      i = i+1;"},
              {eval,{temp,13},{icon,1}},
              {eval,{temp,14},{binop,'+',{temp,3},{temp,13}}},
              {eval,{temp,3},{temp,14}},
              {labdef,{label,103}},
              {eval,{temp,5},{labref,{label,100}}},
              {load,long,{temp,6},{temp,5}},
              {eval,{temp,7},{binop,'<',{temp,3},{temp,6}}},
              {cjump,neq,{temp,7},0,{label,104}},
              {labdef,{label,105}}],
             {labdef,{label,102}}},
       {proc,{label,"check"},
             [{temp,15},{temp,16}],
             [{temp,15},
              {temp,16},
              {temp,17},
              {temp,18},
              {temp,19},
              {temp,20},
              {temp,21},
              {temp,22},
              {temp,23},
              {temp,24},
              {temp,25},
              {temp,26},
              {temp,27},
              {temp,28},
              {temp,29},
              {temp,30},
              {temp,31},
              {temp,32},
              {temp,33},
              {temp,34},
              {temp,35},
              {temp,36},
              {temp,37},
              {temp,38},
              {temp,39},
              {temp,40},
              {temp,41},
              {temp,42}],
             0,
             [{source,40,"  i = col-1;"},
              {eval,{temp,19},{icon,1}},
              {eval,{temp,20},{binop,'-',{temp,15},{temp,19}}},
              {eval,{temp,17},{temp,20}},
              {source,41,"  while (i >= 0) {"},
              {jump,{label,107}},
              {labdef,{label,108}},
              {source,42,"    j = board[i];"},
              {eval,{temp,23},{icon,4}},
              {eval,{temp,24},{binop,'*',{temp,17},{temp,23}}},
              {eval,{temp,25},{labref,{label,101}}},
              {eval,{temp,26},{binop,'+',{temp,25},{temp,24}}},
              {load,long,{temp,27},{temp,26}},
              {eval,{temp,18},{temp,27}},
              {source,43,
                      "    if (j == row) return 0;               // Same row"},
              {eval,{temp,28},{binop,'==',{temp,18},{temp,16}}},
              {cjump,eq,{temp,28},0,{label,110}},
              {source,43,
                      "    if (j == row) return 0;               // Same row"},
              {eval,{temp,29},{icon,0}},
              {eval,{temp,0},{temp,29}},
              {jump,{label,106}},
              {labdef,{label,110}},
              {source,44,"    if (j > row && col-i == j-row) "},
              {eval,{temp,30},{binop,'>',{temp,18},{temp,16}}},
              {cjump,eq,{temp,30},0,{label,112}},
              {eval,{temp,31},{binop,'-',{temp,15},{temp,17}}},
              {eval,{temp,32},{binop,'-',{temp,18},{temp,16}}},
              {eval,{temp,33},{binop,'==',{temp,31},{temp,32}}},
              {cjump,eq,{temp,33},0,{label,112}},
              {eval,{temp,34},{icon,1}},
              {jump,{label,113}},
              {labdef,{label,112}},
              {eval,{temp,34},{icon,0}},
              {labdef,{label,113}},
              {cjump,eq,{temp,34},0,{label,111}},
              {source,45,
                      "      return 0;                           // Diagonal..."},
              {eval,{temp,35},{icon,0}},
              {eval,{temp,0},{temp,35}},
              {jump,{label,106}},
              {labdef,{label,111}},
              {source,46,"    if (col-i == row-j) "},
              {eval,{temp,36},{binop,'-',{temp,15},{temp,17}}},
              {eval,{temp,37},{binop,'-',{temp,16},{temp,18}}},
              {eval,{temp,38},{binop,'==',{temp,36},{temp,37}}},
              {cjump,eq,{temp,38},0,{label,114}},
              {source,47,
                      "      return 0;                           // ...diagonal"},
              {eval,{temp,39},{icon,0}},
              {eval,{temp,0},{temp,39}},
              {jump,{label,106}},
              {labdef,{label,114}},
              {source,48,"    i = i-1;"},
              {eval,{temp,40},{icon,1}},
              {eval,{temp,41},{binop,'-',{temp,17},{temp,40}}},
              {eval,{temp,17},{temp,41}},
              {labdef,{label,107}},
              {eval,{temp,21},{icon,0}},
              {eval,{temp,22},{binop,'>=',{temp,17},{temp,21}}},
              {cjump,neq,{temp,22},0,{label,108}},
              {labdef,{label,109}},
              {source,50,"  return 1;"},
              {eval,{temp,42},{icon,1}},
              {eval,{temp,0},{temp,42}},
              {jump,{label,106}}],
             {labdef,{label,106}}},
       {proc,{label,"queen"},
             [{temp,43},{temp,44}],
             [{temp,43},
              {temp,44},
              {temp,45},
              {temp,46},
              {temp,47},
              {temp,48},
              {temp,49},
              {temp,50},
              {temp,51},
              {temp,52},
              {temp,53},
              {temp,54},
              {temp,55},
              {temp,56},
              {temp,57},
              {temp,58},
              {temp,59},
              {temp,60},
              {temp,61},
              {temp,62},
              {temp,63},
              {temp,64},
              {temp,65}],
             0,
             [{source,54,"  if (col >= n) "},
              {eval,{temp,45},{labref,{label,100}}},
              {load,long,{temp,46},{temp,45}},
              {eval,{temp,47},{binop,'>=',{temp,43},{temp,46}}},
              {cjump,eq,{temp,47},0,{label,116}},
              {source,55,
                      "    return 1; // Returning false will generate all solutions..."},
              {eval,{temp,48},{icon,1}},
              {eval,{temp,0},{temp,48}},
              {jump,{label,115}},
              {labdef,{label,116}},
              {source,56,"  while (row < n) {"},
              {jump,{label,117}},
              {labdef,{label,118}},
              {source,57,"    board[col] = row;"},
              {eval,{temp,52},{icon,4}},
              {eval,{temp,53},{binop,'*',{temp,43},{temp,52}}},
              {eval,{temp,54},{labref,{label,101}}},
              {eval,{temp,55},{binop,'+',{temp,54},{temp,53}}},
              {store,long,{temp,55},{temp,44}},
              {source,58,"    if (check(col,row) && queen(col+1,0))"},
              {call,{temp,56},{label,"check"},[{temp,43},{temp,44}]},
              {cjump,eq,{temp,56},0,{label,121}},
              {eval,{temp,57},{icon,1}},
              {eval,{temp,58},{binop,'+',{temp,43},{temp,57}}},
              {eval,{temp,59},{icon,0}},
              {call,{temp,60},{label,"queen"},[{temp,58},{temp,59}]},
              {cjump,eq,{temp,60},0,{label,121}},
              {eval,{temp,61},{icon,1}},
              {jump,{label,122}},
              {labdef,{label,121}},
              {eval,{temp,61},{icon,0}},
              {labdef,{label,122}},
              {cjump,eq,{temp,61},0,{label,120}},
              {source,59,"      return 1;"},
              {eval,{temp,62},{icon,1}},
              {eval,{temp,0},{temp,62}},
              {jump,{label,115}},
              {labdef,{label,120}},
              {source,60,"    row = row + 1;"},
              {eval,{temp,63},{icon,1}},
              {eval,{temp,64},{binop,'+',{temp,44},{temp,63}}},
              {eval,{temp,44},{temp,64}},
              {labdef,{label,117}},
              {eval,{temp,49},{labref,{label,100}}},
              {load,long,{temp,50},{temp,49}},
              {eval,{temp,51},{binop,'<',{temp,44},{temp,50}}},
              {cjump,neq,{temp,51},0,{label,118}},
              {labdef,{label,119}},
              {source,62,"  return 0;"},
              {eval,{temp,65},{icon,0}},
              {eval,{temp,0},{temp,65}},
              {jump,{label,115}}],
             {labdef,{label,115}}},
       {proc,{label,"main"},
             [],
             [{temp,66},
              {temp,67},
              {temp,68},
              {temp,69},
              {temp,70},
              {temp,71},
              {temp,72}],
             0,
             [{source,66,"  n = 8;"},
              {eval,{temp,66},{icon,8}},
              {eval,{temp,67},{labref,{label,100}}},
              {store,long,{temp,67},{temp,66}},
              {source,67,"  queen(0,0);"},
              {eval,{temp,68},{icon,0}},
              {eval,{temp,69},{icon,0}},
              {call,{temp,70},{label,"queen"},[{temp,68},{temp,69}]},
              {source,68,"  printboard(board);"},
              {eval,{temp,71},{labref,{label,101}}},
              {call,{temp,72},{label,"printboard"},[{temp,71}]}],
             {labdef,{label,123}}}]}}.
