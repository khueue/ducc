{{source,[{1,[]},
          {2,"/* Test."},
          {3,"** 8-queen."},
          {4,[]},
          {5,"Expected output:"},
          {6,[]},
          {7,"04752613"},
          {8,[]},
          {9,"This corresponds to the following board:"},
          {10,[]},
          {11,"--x-----"},
          {12,"-----x--"},
          {13,"---x----"},
          {14,"-x------"},
          {15,"-------x"},
          {16,"----x---"},
          {17,"------x-"},
          {18,"x-------"},
          {19,[]},
          {20,"*/"},
          {21,[]},
          {22,"int n;"},
          {23,"int board[8];"},
          {24,[]},
          {25,"void putint(int x);"},
          {26,[]},
          {27,"void printboard(int board[]) {"},
          {28,"  int i;"},
          {29,"  i = 0;"},
          {30,"  while(i < n) {"},
          {31,"      putint( board[i]);"},
          {32,"      i = i+1;"},
          {33,"    }"},
          {34,"}"},
          {35,[]},
          {36,"int check(int col, int row) {"},
          {37,"  int i;"},
          {38,"  int j;"},
          {39,[]},
          {40,"  i = col-1;"},
          {41,"  while (i >= 0) {"},
          {42,"    j = board[i];"},
          {43,"    if (j == row) return 0;               // Same row"},
          {44,"    if (j > row && col-i == j-row) "},
          {45,"      return 0;                           // Diagonal..."},
          {46,"    if (col-i == row-j) "},
          {47,"      return 0;                           // ...diagonal"},
          {48,"    i = i-1;"},
          {49,"  }"},
          {50,"  return 1;"},
          {51,"}"},
          {52,[]},
          {53,"int queen(int col, int row) {"},
          {54,"  if (col >= n) "},
          {55,"    return 1; // Returning false will generate all solutions..."},
          {56,"  while (row < n) {"},
          {57,"    board[col] = row;"},
          {58,"    if (check(col,row) && queen(col+1,0))"},
          {59,"      return 1;"},
          {60,"    row = row + 1;"},
          {61,"  }"},
          {62,"  return 0;"},
          {63,"}"},
          {64,[]},
          {65,"int main(void) {"},
          {66,"  n = 8;"},
          {67,"  queen(0,0);"},
          {68,"  printboard(board);"},
          {69,"}"},
          {70,[]},
          {71,[]},
          {72,[]}]},
 {asm,[[{segment,data},{align,4},{labdef,{label,"n"}},{space,4}],
       [{segment,data},{align,4},{labdef,{label,"board"}},{space,32}],
       [{segment,text},
        {globl,{label,"printboard"}},
        {labdef,{label,"printboard"}},
        {subu,sp,sp,56},
        {sw,fp,52,sp},
        {sw,ra,48,sp},
        {addu,fp,sp,56},
        {labdef,{label,100,"printboard_end"}},
        {lw,ra,48,sp},
        {lw,fp,52,sp},
        {addu,sp,sp,56},
        {j,ra}],
       [{segment,text},
        {globl,{label,"check"}},
        {labdef,{label,"check"}},
        {subu,sp,sp,112},
        {sw,fp,108,sp},
        {sw,ra,104,sp},
        {addu,fp,sp,112},
        {labdef,{label,104,"check_end"}},
        {lw,ra,104,sp},
        {lw,fp,108,sp},
        {addu,sp,sp,112},
        {j,ra}],
       [{segment,text},
        {globl,{label,"queen"}},
        {labdef,{label,"queen"}},
        {subu,sp,sp,92},
        {sw,fp,88,sp},
        {sw,ra,84,sp},
        {addu,fp,sp,92},
        {labdef,{label,113,"queen_end"}},
        {lw,ra,84,sp},
        {lw,fp,88,sp},
        {addu,sp,sp,92},
        {j,ra}],
       [{segment,text},
        {globl,{label,"main"}},
        {labdef,{label,"main"}},
        {subu,sp,sp,36},
        {sw,fp,32,sp},
        {sw,ra,28,sp},
        {addu,fp,sp,36},
        {labdef,{label,121,"main_end"}},
        {lw,ra,28,sp},
        {lw,fp,32,sp},
        {addu,sp,sp,36},
        {j,ra}]]}}.
