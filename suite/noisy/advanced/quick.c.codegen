{{source,[{1,"// This program illustrates the quick sort algorithm by sorting an"},
          {2,"// array of char and printing the intermediate results."},
          {3,"//"},
          {4,"// Adapted from N.Wirth: Algorithms + Data Structures = Programs"},
          {5,[]},
          {6,[]},
          {7,"void putstring(char s[]);"},
          {8,[]},
          {9,"char eol[2];"},
          {10,"int n;"},
          {11,[]},
          {12,[]},
          {13,"void sort(char a[], int l, int r) {"},
          {14,"  int i;"},
          {15,"  int j;"},
          {16,"  char x;"},
          {17,"  char w;"},
          {18,[]},
          {19,[]},
          {20,"  i = l;"},
          {21,"  j = r;"},
          {22,"  x = a[(l+r) / 2];"},
          {23,"  "},
          {24,"  while ( i<= j) {"},
          {25,"    while (a[i] < x) i = i + 1;"},
          {26,"    while (x < a[j]) j = j - 1;"},
          {27,"    if (i<= j) {"},
          {28,"      w = a[i];"},
          {29,"      a[i] = a[j];"},
          {30,"      a[j] = w;"},
          {31,"      i = i + 1;"},
          {32,"      j = j - 1;"},
          {33,"    }"},
          {34,"  }"},
          {35,[]},
          {36,"  putstring (a);"},
          {37,"  putstring (eol);"},
          {38,"  if (l < j) sort(a, l,j);"},
          {39,"  if (i < r) sort(a, i, r);"},
          {40,[]},
          {41,"}"},
          {42,[]},
          {43,"int main(void)"},
          {44,"{"},
          {45,"  char s[27];"},
          {46,"  int i;"},
          {47,"  char t;"},
          {48,"  int q;"},
          {49,[]},
          {50,"  eol[0] = '\\n';"},
          {51,"  eol[1] = 0;"},
          {52,[]},
          {53,"  n = 26;"},
          {54,[]},
          {55,"  s[n] = 0;"},
          {56,[]},
          {57,"  i = 0;"},
          {58,[]},
          {59,"  // Fill the string with random-looking data"},
          {60,"  q = 11;"},
          {61,"  while (i<n) {"},
          {62,"    t = q - (q / 26)*26;"},
          {63,"    s[i] = 'a'+t;"},
          {64,"    i = i + 1;"},
          {65,"    q = q + 17;"},
          {66,"  }"},
          {67,[]},
          {68,[]},
          {69,"  putstring (s); // print it ..."},
          {70,"  putstring (eol);"},
          {71,"  sort(s, 0, n-1); // sort it ..."},
          {72,"  putstring(s);  // and print again"},
          {73,"  putstring (eol);"},
          {74,[]},
          {75,"}"}]},
 {asm,[[{segment,data},{align,4},{labdef,{label,"eol"}},{space,2}],
       [{segment,data},{align,4},{labdef,{label,"n"}},{space,4}],
       [{segment,text},
        {globl,{label,"sort"}},
        {labdef,{label,"sort"}},
        {subu,sp,sp,216},
        {sw,fp,212,sp},
        {sw,ra,208,sp},
        {addu,fp,sp,216},
        {lw,t0,4,fp},
        {sw,t0,0,sp},
        {lw,t0,8,fp},
        {sw,t0,4,sp},
        {lw,t0,4,fp},
        {lw,t1,8,fp},
        {add,t2,t0,t1},
        {sw,t2,8,sp},
        {li,t0,2},
        {sw,t0,12,sp},
        {lw,t0,8,sp},
        {lw,t1,12,sp},
        {'div',t2,t0,t1},
        {sw,t2,16,sp},
        {li,t0,1},
        {sw,t0,20,sp},
        {lw,t0,16,sp},
        {lw,t1,20,sp},
        {mul,t2,t0,t1},
        {sw,t2,24,sp},
        {lw,t0,0,fp},
        {lw,t1,24,sp},
        {add,t2,t0,t1},
        {sw,t2,28,sp},
        {xxx,"--- XXX UNHANDLED: load byte"},
        {lw,t0,32,sp},
        {sw,t0,36,sp},
        {j,{label,101,"while_test"}},
        {labdef,{label,102,"while_body"}},
        {j,{label,104,"while_test"}},
        {labdef,{label,105,"while_body"}},
        {li,t0,1},
        {sw,t0,40,sp},
        {lw,t0,0,sp},
        {lw,t1,40,sp},
        {add,t2,t0,t1},
        {sw,t2,44,sp},
        {lw,t0,44,sp},
        {sw,t0,0,sp},
        {labdef,{label,104,"while_test"}},
        {li,t0,1},
        {sw,t0,48,sp},
        {lw,t0,0,sp},
        {lw,t1,48,sp},
        {mul,t2,t0,t1},
        {sw,t2,52,sp},
        {lw,t0,0,fp},
        {lw,t1,52,sp},
        {add,t2,t0,t1},
        {sw,t2,56,sp},
        {xxx,"--- XXX UNHANDLED: load byte"},
        {lw,t0,60,sp},
        {lw,t1,36,sp},
        {slt,t2,t0,t1},
        {sw,t2,64,sp},
        {xxx,"--- XXX UNHANDLED: cjump"},
        {labdef,{label,106,"while_end"}},
        {j,{label,107,"while_test"}},
        {labdef,{label,108,"while_body"}},
        {li,t0,1},
        {sw,t0,68,sp},
        {lw,t0,4,sp},
        {lw,t1,68,sp},
        {sub,t2,t0,t1},
        {sw,t2,72,sp},
        {lw,t0,72,sp},
        {sw,t0,4,sp},
        {labdef,{label,107,"while_test"}},
        {li,t0,1},
        {sw,t0,76,sp},
        {lw,t0,4,sp},
        {lw,t1,76,sp},
        {mul,t2,t0,t1},
        {sw,t2,80,sp},
        {lw,t0,0,fp},
        {lw,t1,80,sp},
        {add,t2,t0,t1},
        {sw,t2,84,sp},
        {xxx,"--- XXX UNHANDLED: load byte"},
        {lw,t0,36,sp},
        {lw,t1,88,sp},
        {slt,t2,t0,t1},
        {sw,t2,92,sp},
        {xxx,"--- XXX UNHANDLED: cjump"},
        {labdef,{label,109,"while_end"}},
        {lw,t0,0,sp},
        {lw,t1,4,sp},
        {sle,t2,t0,t1},
        {sw,t2,96,sp},
        {xxx,"--- XXX UNHANDLED: cjump"},
        {li,t0,1},
        {sw,t0,100,sp},
        {lw,t0,0,sp},
        {lw,t1,100,sp},
        {mul,t2,t0,t1},
        {sw,t2,104,sp},
        {lw,t0,0,fp},
        {lw,t1,104,sp},
        {add,t2,t0,t1},
        {sw,t2,108,sp},
        {xxx,"--- XXX UNHANDLED: load byte"},
        {lw,t0,112,sp},
        {sw,t0,116,sp},
        {li,t0,1},
        {sw,t0,120,sp},
        {lw,t0,4,sp},
        {lw,t1,120,sp},
        {mul,t2,t0,t1},
        {sw,t2,124,sp},
        {lw,t0,0,fp},
        {lw,t1,124,sp},
        {add,t2,t0,t1},
        {sw,t2,128,sp},
        {xxx,"--- XXX UNHANDLED: load byte"},
        {li,t0,1},
        {sw,t0,132,sp},
        {lw,t0,0,sp},
        {lw,t1,132,sp},
        {mul,t2,t0,t1},
        {sw,t2,136,sp},
        {lw,t0,0,fp},
        {lw,t1,136,sp},
        {add,t2,t0,t1},
        {sw,t2,140,sp},
        {xxx,"--- XXX UNHANDLED: store byte"},
        {li,t0,1},
        {sw,t0,144,sp},
        {lw,t0,4,sp},
        {lw,t1,144,sp},
        {mul,t2,t0,t1},
        {sw,t2,148,sp},
        {lw,t0,0,fp},
        {lw,t1,148,sp},
        {add,t2,t0,t1},
        {sw,t2,152,sp},
        {xxx,"--- XXX UNHANDLED: store byte"},
        {li,t0,1},
        {sw,t0,156,sp},
        {lw,t0,0,sp},
        {lw,t1,156,sp},
        {add,t2,t0,t1},
        {sw,t2,160,sp},
        {lw,t0,160,sp},
        {sw,t0,0,sp},
        {li,t0,1},
        {sw,t0,164,sp},
        {lw,t0,4,sp},
        {lw,t1,164,sp},
        {sub,t2,t0,t1},
        {sw,t2,168,sp},
        {lw,t0,168,sp},
        {sw,t0,4,sp},
        {labdef,{label,110,"if_end"}},
        {labdef,{label,101,"while_test"}},
        {lw,t0,0,sp},
        {lw,t1,4,sp},
        {sle,t2,t0,t1},
        {sw,t2,172,sp},
        {xxx,"--- XXX UNHANDLED: cjump"},
        {labdef,{label,103,"while_end"}},
        {xxx,"--- XXX UNHANDLED: call"},
        {la,t0,{label,"eol"}},
        {sw,t0,176,sp},
        {xxx,"--- XXX UNHANDLED: call"},
        {lw,t0,4,fp},
        {lw,t1,4,sp},
        {slt,t2,t0,t1},
        {sw,t2,180,sp},
        {xxx,"--- XXX UNHANDLED: cjump"},
        {xxx,"--- XXX UNHANDLED: call"},
        {labdef,{label,111,"if_end"}},
        {lw,t0,0,sp},
        {lw,t1,8,fp},
        {slt,t2,t0,t1},
        {sw,t2,184,sp},
        {xxx,"--- XXX UNHANDLED: cjump"},
        {xxx,"--- XXX UNHANDLED: call"},
        {labdef,{label,112,"if_end"}},
        {labdef,{label,100,"sort_end"}},
        {lw,ra,208,sp},
        {lw,fp,212,sp},
        {addu,sp,sp,216},
        {jr,ra}],
       [{segment,text},
        {globl,{label,"main"}},
        {labdef,{label,"main"}},
        {subu,sp,sp,292},
        {sw,fp,260,sp},
        {sw,ra,256,sp},
        {addu,fp,sp,292},
        {li,t0,'\\n'},
        {sw,t0,0,sp},
        {li,t0,0},
        {sw,t0,4,sp},
        {li,t0,1},
        {sw,t0,8,sp},
        {lw,t0,4,sp},
        {lw,t1,8,sp},
        {mul,t2,t0,t1},
        {sw,t2,12,sp},
        {la,t0,{label,"eol"}},
        {sw,t0,16,sp},
        {lw,t0,16,sp},
        {lw,t1,12,sp},
        {add,t2,t0,t1},
        {sw,t2,20,sp},
        {xxx,"--- XXX UNHANDLED: store byte"},
        {li,t0,0},
        {sw,t0,24,sp},
        {li,t0,1},
        {sw,t0,28,sp},
        {li,t0,1},
        {sw,t0,32,sp},
        {lw,t0,28,sp},
        {lw,t1,32,sp},
        {mul,t2,t0,t1},
        {sw,t2,36,sp},
        {la,t0,{label,"eol"}},
        {sw,t0,40,sp},
        {lw,t0,40,sp},
        {lw,t1,36,sp},
        {add,t2,t0,t1},
        {sw,t2,44,sp},
        {xxx,"--- XXX UNHANDLED: store byte"},
        {li,t0,26},
        {sw,t0,48,sp},
        {la,t0,{label,"n"}},
        {sw,t0,52,sp},
        {lw,t0,52,sp},
        {lw,t1,48,sp},
        {sw,t1,0,t0},
        {li,t0,0},
        {sw,t0,56,sp},
        {la,t0,{label,"n"}},
        {sw,t0,60,sp},
        {lw,t0,60,sp},
        {sw,t0,64,sp},
        {li,t0,1},
        {sw,t0,68,sp},
        {lw,t0,64,sp},
        {lw,t1,68,sp},
        {mul,t2,t0,t1},
        {sw,t2,72,sp},
        {li,t0,0},
        {sw,t0,76,sp},
        {lw,t0,76,sp},
        {lw,t1,72,sp},
        {add,t2,t0,t1},
        {sw,t2,80,sp},
        {lw,t0,84,sp},
        {lw,t1,80,sp},
        {add,t2,t0,t1},
        {sw,t2,88,sp},
        {xxx,"--- XXX UNHANDLED: store byte"},
        {li,t0,0},
        {sw,t0,92,sp},
        {lw,t0,92,sp},
        {sw,t0,96,sp},
        {li,t0,11},
        {sw,t0,100,sp},
        {lw,t0,100,sp},
        {sw,t0,104,sp},
        {j,{label,114,"while_test"}},
        {labdef,{label,115,"while_body"}},
        {li,t0,26},
        {sw,t0,108,sp},
        {lw,t0,104,sp},
        {lw,t1,108,sp},
        {'div',t2,t0,t1},
        {sw,t2,112,sp},
        {li,t0,26},
        {sw,t0,116,sp},
        {lw,t0,112,sp},
        {lw,t1,116,sp},
        {mul,t2,t0,t1},
        {sw,t2,120,sp},
        {lw,t0,104,sp},
        {lw,t1,120,sp},
        {sub,t2,t0,t1},
        {sw,t2,124,sp},
        {lw,t0,124,sp},
        {sw,t0,128,sp},
        {li,t0,a},
        {sw,t0,132,sp},
        {lw,t0,132,sp},
        {lw,t1,128,sp},
        {add,t2,t0,t1},
        {sw,t2,136,sp},
        {li,t0,1},
        {sw,t0,140,sp},
        {lw,t0,96,sp},
        {lw,t1,140,sp},
        {mul,t2,t0,t1},
        {sw,t2,144,sp},
        {li,t0,0},
        {sw,t0,148,sp},
        {lw,t0,148,sp},
        {lw,t1,144,sp},
        {add,t2,t0,t1},
        {sw,t2,152,sp},
        {lw,t0,84,sp},
        {lw,t1,152,sp},
        {add,t2,t0,t1},
        {sw,t2,156,sp},
        {xxx,"--- XXX UNHANDLED: store byte"},
        {li,t0,1},
        {sw,t0,160,sp},
        {lw,t0,96,sp},
        {lw,t1,160,sp},
        {add,t2,t0,t1},
        {sw,t2,164,sp},
        {lw,t0,164,sp},
        {sw,t0,96,sp},
        {li,t0,17},
        {sw,t0,168,sp},
        {lw,t0,104,sp},
        {lw,t1,168,sp},
        {add,t2,t0,t1},
        {sw,t2,172,sp},
        {lw,t0,172,sp},
        {sw,t0,104,sp},
        {labdef,{label,114,"while_test"}},
        {la,t0,{label,"n"}},
        {sw,t0,176,sp},
        {lw,t0,176,sp},
        {sw,t0,180,sp},
        {lw,t0,96,sp},
        {lw,t1,180,sp},
        {slt,t2,t0,t1},
        {sw,t2,184,sp},
        {xxx,"--- XXX UNHANDLED: cjump"},
        {labdef,{label,116,"while_end"}},
        {li,t0,0},
        {sw,t0,188,sp},
        {lw,t0,84,sp},
        {lw,t1,188,sp},
        {add,t2,t0,t1},
        {sw,t2,192,sp},
        {xxx,"--- XXX UNHANDLED: call"},
        {la,t0,{label,"eol"}},
        {sw,t0,196,sp},
        {xxx,"--- XXX UNHANDLED: call"},
        {li,t0,0},
        {sw,t0,200,sp},
        {lw,t0,84,sp},
        {lw,t1,200,sp},
        {add,t2,t0,t1},
        {sw,t2,204,sp},
        {li,t0,0},
        {sw,t0,208,sp},
        {la,t0,{label,"n"}},
        {sw,t0,212,sp},
        {lw,t0,212,sp},
        {sw,t0,216,sp},
        {li,t0,1},
        {sw,t0,220,sp},
        {lw,t0,216,sp},
        {lw,t1,220,sp},
        {sub,t2,t0,t1},
        {sw,t2,224,sp},
        {xxx,"--- XXX UNHANDLED: call"},
        {li,t0,0},
        {sw,t0,228,sp},
        {lw,t0,84,sp},
        {lw,t1,228,sp},
        {add,t2,t0,t1},
        {sw,t2,232,sp},
        {xxx,"--- XXX UNHANDLED: call"},
        {la,t0,{label,"eol"}},
        {sw,t0,236,sp},
        {xxx,"--- XXX UNHANDLED: call"},
        {labdef,{label,113,"main_end"}},
        {lw,ra,256,sp},
        {lw,fp,260,sp},
        {addu,sp,sp,292},
        {jr,ra}]]}}.
