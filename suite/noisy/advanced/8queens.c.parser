{{source,[{1,[]},
          {2,"/* Test."},
          {3,"** 8-queen."},
          {4,[]},
          {5,"Expected output:"},
          {6,[]},
          {7,"04752613"},
          {8,[]},
          {9,"This corresponds to the following board:"},
          {10,[]},
          {11,"--x-----"},
          {12,"-----x--"},
          {13,"---x----"},
          {14,"-x------"},
          {15,"-------x"},
          {16,"----x---"},
          {17,"------x-"},
          {18,"x-------"},
          {19,[]},
          {20,"*/"},
          {21,[]},
          {22,"int n;"},
          {23,"int board[8];"},
          {24,[]},
          {25,"void putint(int x);"},
          {26,[]},
          {27,"void printboard(int board[]) {"},
          {28,"  int i;"},
          {29,"  i = 0;"},
          {30,"  while(i < n) {"},
          {31,"      putint( board[i]);"},
          {32,"      i = i+1;"},
          {33,"    }"},
          {34,"}"},
          {35,[]},
          {36,"int check(int col, int row) {"},
          {37,"  int i;"},
          {38,"  int j;"},
          {39,[]},
          {40,"  i = col-1;"},
          {41,"  while (i >= 0) {"},
          {42,"    j = board[i];"},
          {43,"    if (j == row) return 0;               // Same row"},
          {44,"    if (j > row && col-i == j-row) "},
          {45,"      return 0;                           // Diagonal..."},
          {46,"    if (col-i == row-j) "},
          {47,"      return 0;                           // ...diagonal"},
          {48,"    i = i-1;"},
          {49,"  }"},
          {50,"  return 1;"},
          {51,"}"},
          {52,[]},
          {53,"int queen(int col, int row) {"},
          {54,"  if (col >= n) "},
          {55,"    return 1; // Returning false will generate all solutions..."},
          {56,"  while (row < n) {"},
          {57,"    board[col] = row;"},
          {58,"    if (check(col,row) && queen(col+1,0))"},
          {59,"      return 1;"},
          {60,"    row = row + 1;"},
          {61,"  }"},
          {62,"  return 0;"},
          {63,"}"},
          {64,[]},
          {65,"int main(void) {"},
          {66,"  n = 8;"},
          {67,"  queen(0,0);"},
          {68,"  printboard(board);"},
          {69,"}"},
          {70,[]},
          {71,[]},
          {72,[]}]},
 {ast,{{22,program},
       "suite/noisy/advanced/8queens.c",
       [{{22,scalardec},int,"n"},
        {{23,arraydec},int,"board",8},
        {{25,fundec},void,"putint",[{{25,scalardec},int,"x"}]},
        {{27,fundef},
         void,"printboard",
         [{{27,farraydec},int,"board"}],
         [{{28,scalardec},int,"i"}],
         [{{29,binop},{{29,ident},"i"},'=',{{29,intconst},0}},
          {{30,while},
           {{30,binop},{{30,ident},"i"},'<',{{30,ident},"n"}},
           [{{31,funcall},"putint",[{{31,arrelem},"board",{{31,ident},"i"}}]},
            {{32,binop},
             {{32,ident},"i"},
             '=',
             {{32,binop},{{32,ident},"i"},'+',{{32,intconst},1}}}]}]},
        {{36,fundef},
         int,"check",
         [{{36,scalardec},int,"col"},{{36,scalardec},int,"row"}],
         [{{37,scalardec},int,"i"},{{38,scalardec},int,"j"}],
         [{{40,binop},{{40,ident},"i"},'=',{{40,binop},{{40,ident},"col"},'-',{{40,intconst},1}}},
          {{41,while},
           {{41,binop},{{41,ident},"i"},'>=',{{41,intconst},0}},
           [{{42,binop},{{42,ident},"j"},'=',{{42,arrelem},"board",{{42,ident},"i"}}},
            {{43,'if'},
             {{43,binop},{{43,ident},"j"},'==',{{43,ident},"row"}},
             {{43,return},{{43,intconst},0}},
             nil},
            {{44,'if'},
             {{44,binop},
              {{44,binop},{{44,ident},"j"},'>',{{44,ident},"row"}},
              '&&',
              {{44,binop},
               {{44,binop},{{44,ident},"col"},'-',{{44,ident},"i"}},
               '==',
               {{44,binop},{{44,ident},"j"},'-',{{44,ident},"row"}}}},
             {{45,return},{{45,intconst},0}},
             nil},
            {{46,'if'},
             {{46,binop},
              {{46,binop},{{46,ident},"col"},'-',{{46,ident},"i"}},
              '==',
              {{46,binop},{{46,ident},"row"},'-',{{46,ident},"j"}}},
             {{47,return},{{47,intconst},0}},
             nil},
            {{48,binop},
             {{48,ident},"i"},
             '=',
             {{48,binop},{{48,ident},"i"},'-',{{48,intconst},1}}}]},
          {{50,return},{{50,intconst},1}}]},
        {{53,fundef},
         int,"queen",
         [{{53,scalardec},int,"col"},{{53,scalardec},int,"row"}],
         [],
         [{{54,'if'},
           {{54,binop},{{54,ident},"col"},'>=',{{54,ident},"n"}},
           {{55,return},{{55,intconst},1}},
           nil},
          {{56,while},
           {{56,binop},{{56,ident},"row"},'<',{{56,ident},"n"}},
           [{{57,binop},{{57,arrelem},"board",{{57,ident},"col"}},'=',{{57,ident},"row"}},
            {{58,'if'},
             {{58,binop},
              {{58,funcall},"check",[{{58,ident},"col"},{{58,ident},"row"}]},
              '&&',
              {{58,funcall},
               "queen",
               [{{58,binop},{{58,ident},"col"},'+',{{58,intconst},1}},{{58,intconst},0}]}},
             {{59,return},{{59,intconst},1}},
             nil},
            {{60,binop},
             {{60,ident},"row"},
             '=',
             {{60,binop},{{60,ident},"row"},'+',{{60,intconst},1}}}]},
          {{62,return},{{62,intconst},0}}]},
        {{65,fundef},
         int,"main",[],[],
         [{{66,binop},{{66,ident},"n"},'=',{{66,intconst},8}},
          {{67,funcall},"queen",[{{67,intconst},0},{{67,intconst},0}]},
          {{68,funcall},"printboard",[{{68,ident},"board"}]}]}]}}}.
